---
name: Elixir Style/Code Quality Checks

"on":
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  MIX_ENV: dev
  SECRET_KEY_BASE: "kNdLk1/ffDLY4T1sKLmBffS0SpG7hzpq6/rRD7yM6W25l2Q9BwXlOGumdJWvZygA"
  PHX_GITHUB_TOKEN: fake

jobs:
  build:
    name: Check Formatting & Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - id: setup-elixir
        uses: erlef/setup-beam@v1
        with:
          version-type: strict
          version-file: ".tool-versions"
      - id: mix-cache 
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-${{ steps.setup-elixir.outputs.otp-version }}-${{ steps.setup-elixir.outputs.elixir-version }}-dev-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.setup-elixir.outputs.otp-version }}-${{ steps.setup-elixir.outputs.elixir-version }}-dev-mix-
      - name: Install dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
          mix deps.compile
      - name: Check Formatting
        if: ${{ always() }}
        run: mix format --check-formatted
      - name: Run Credo
        if: ${{ always() }}
        run: mix credo --strict
      - name: Retrieve PLT Cache
        if: ${{ always() }}
        uses: actions/cache@v4
        id: plt-cache
        with:
          path: priv/plts
          key: ${{ runner.os }}-${{ steps.setup-elixir.outputs.otp-version }}-${{ steps.setup-elixir.outputs.elixir-version }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Create PLTs
        if: ${{ always() }} && steps.plt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt
      - name: Run dialyzer
        if: ${{ always() }}
        run: mix dialyzer --no-check --halt-exit-status
